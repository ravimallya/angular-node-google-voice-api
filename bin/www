#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('mean-angular6:server');
const http = require('http');
const fs = require('fs');
const toWav = require('audiobuffer-to-wav');

const environmentVars = require('dotenv').config();

// Google Cloud
const speech = require('@google-cloud/speech');
const speechClient = new speech.SpeechClient(); // Creates a client



/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

// socket io

const io = require('socket.io')(server);


// =========================== SOCKET.IO ================================ //

io.on('connection', (client) => {
    console.log('Client Connected to server');
    let recognizeStream = null;

    let finalFile = null;

    // client.on('join', (data) => {
    //     client.emit('messages', 'Socket Connected to Server');
    // });

    // client.on('messages', (data) => {
    //     client.emit('broad', data);
    // });

    client.on('startGoogleCloudStream', (data) => {
        startRecognitionStream(this, data);
    });

    client.on('endGoogleCloudStream', (data) => {
        stopRecognitionStream();
    });

    client.on('binaryData', (data) => {
         console.log('data'); //log binary data
         console.log(data); //log binary data
        // finalFile = toWav(data);
        fs.writeFileSync('temp/audiofile.wav', new Buffer(data), function(err){
            console.log('err', err);
        })
     //   console.log('recognizeStream', recognizeStream);
        if (recognizeStream !== null) {
            recognizeStream.write(data);
        }
    });

    const startRecognitionStream = (datavar) => {
        recognizeStream = speechClient.streamingRecognize(request)
            .on('error', console.error)
            .on('data', (data) => {
                process.stdout.write(
                    (data.results[0] && data.results[0].alternatives[0]) ?
                    `Transcription: ${data.results[0].alternatives[0].transcript}\n` :
                    `\n\nReached transcription time limit, press Ctrl+C\n`);
                client.emit('speechData', data);

                // if end of utterance, let's restart stream
                // this is a small hack. After 65 seconds of silence, the stream will still throw an error for speech length limit
                if (data.results[0] && data.results[0].isFinal) {
                    stopRecognitionStream();
                    startRecognitionStream(client);
                    // console.log('restarted stream serverside');
                }
            });
    };

    const stopRecognitionStream = () => {
        if (recognizeStream) {
            recognizeStream.end();
        }
        console.log('save', finalFile);
        recognizeStream = null;
    };
});


// =========================== GOOGLE CLOUD SETTINGS ================================ //

// The encoding of the audio file, e.g. 'LINEAR16'
// The sample rate of the audio file in hertz, e.g. 16000
// The BCP-47 language code to use, e.g. 'en-US'
const encoding = 'LINEAR16';
const sampleRateHertz = 16000;
const languageCode = 'en-US'; // en-US

const request = {
    config: {
        // tslint:disable-next-line:object-literal-shorthand
        encoding: encoding,
        // tslint:disable-next-line:object-literal-shorthand
        sampleRateHertz: sampleRateHertz,
        // tslint:disable-next-line:object-literal-shorthand
        languageCode: languageCode,
        profanityFilter: false,
        enableWordTimeOffsets: true,
        // speechContexts: [{
        //     phrases: ["hoful","shwazil"]
        //    }] // add your own speech context for better recognition
    },
    interimResults: true // If you want interim results, set this to true
};


// end socket io

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    const portval = parseInt(val, 10);
    if (isNaN(portval)) {
        // named pipe
        return val;
    }
    if (portval >= 0) {
        // port number
        return portval;
    }
    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }
    const bind = typeof port === 'string' ?
        'Pipe ' + port :
        'Port ' + port;
    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ?
        'pipe ' + addr :
        'port ' + addr.port;
    debug('Listening on ' + bind);
}

// build && node ./bin/www